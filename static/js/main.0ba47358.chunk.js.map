{"version":3,"sources":["lalala.js","App.js","serviceWorker.js","index.js"],"names":["getSequence","n","_r","_p","p","r","myRandom","Array","fill","map","toBin","val","xorSequences","s1","s2","length","Error","_","i","encrypt","input","rValue","binaryInputString","split","el","charCodeAt","toString","bin","diff","join","reduce","acc","stringToBinarySequence","binaryArray","decode","chunk","parseInt","String","fromCharCode","chankedSequenceToString","slice","binaryStringTOBinaryArray","COntentDiv","styled","div","DivStartStyle","ButtonStyled","button","TextAreaDiv","UserControllDiv","RValueDiv","ButtonConteiner","App","state","inputText","outputText","encode","inputArea","document","getElementById","rValueInput","setState","encryption","value","Number","textfromOutputToInput","cur","typingText","event","target","className","id","cols","rows","this","onChange","children","onClick","readOnly","type","placeholder","pattern","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ba47358.chunk.js","sourcesContent":["var chunks = function(array, size) {\n  var results = [];\n  while (array.length) {\n    results.push(array.splice(0, size));\n  }\n  return results;\n};\n\nconst getSequence = (n, _r = 3.68, _p = 0.1) => {\n  var p = _p;\n  var r = _r;\n\n  function myRandom() {\n    p = r * p * (1 - p);\n    return p;\n  }\n\n  return Array(n)\n    .fill()\n    .map(myRandom);\n};\nconst stringToBinarySequence = input =>\n  input\n    .split(\"\")\n    .map(el => el.charCodeAt(0).toString(2))\n    .map(bin => {\n      const symbolSize = 8;\n      const diff = Array(symbolSize - bin.toString().length).fill(0);\n\n      return [...diff, ...bin].join(\"\");\n    })\n    .reduce((acc, el) => [...acc, ...el.split(\"\")], []);\n\n// input - chanked by 8 bits array\nconst chankedSequenceToString = input => {\n  const decimals = input.map(chunk => parseInt(chunk.join(\"\"), 2));\n  return decimals.map(n => String.fromCharCode(n)).join(\"\");\n};\n\nconst toBin = val => (val < 0.5 ? 0 : 1);\n\nconst xorSequences = (s1, s2) => {\n  if (s1.length !== s2.length) throw new Error(\"Sequences should have same length\");\n\n  return Array(s1.length)\n    .fill()\n    .map((_, i) => s1[i] ^ s2[i]);\n};\n\nconst encrypt = (input, rValue) => {\n  const binaryInputString = stringToBinarySequence(input);\n  const binaryArray = getSequence(binaryInputString.length, rValue).map(toBin);\n  const encrypted = xorSequences(binaryInputString, binaryArray);\n  return encrypted.join();\n};\nconst binaryStringTOBinaryArray = input => {\n  return Array(input.length / 8)\n    .fill()\n    .map((_, i) => input.slice(8 * i, 8 * i + 8));\n};\n\nconst decode = (input, rValue) => {\n  const binaryInputString = input.split(\",\");\n  const binaryArray = getSequence(binaryInputString.length, rValue).map(toBin);\n  const encrypted = xorSequences(binaryInputString.join(\"\"), binaryArray);\n  const byteArray = binaryStringTOBinaryArray(encrypted);\n  return chankedSequenceToString(byteArray);\n};\n\nexport default { encrypt, decode };\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport encryption from \"./lalala.js\";\nconst COntentDiv = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nconst DivStartStyle = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  padding: 10px;\n`;\nconst ButtonStyled = styled.button`\n  height: 30px;\n`;\nconst TextAreaDiv = styled(DivStartStyle)`\n  justify-content: space-around;\n  align-items: center;\n`;\nconst UserControllDiv = styled(DivStartStyle)`\n  flex-direction: column;\n  padding: 0;\n`;\nconst RValueDiv = styled(DivStartStyle)`\n  justify-content: start;\n  line-height: 5px;\n`;\nconst ButtonConteiner = styled(DivStartStyle)``;\nclass App extends React.Component {\n  state = {\n    inputText: \"\",\n    outputText: \"\"\n  };\n  encode = () => {\n    const inputArea = document.getElementById(\"input\");\n    const rValueInput = document.getElementById(\"rValue\");\n    this.setState({ outputText: encryption.encrypt(inputArea.value, Number(rValueInput.value)) });\n  };\n  decode = () => {\n    const inputArea = document.getElementById(\"input\");\n    const rValueInput = document.getElementById(\"rValue\");\n    this.setState({ outputText: encryption.decode(inputArea.value, Number(rValueInput.value)) });\n  };\n  textfromOutputToInput = () => {\n    this.setState(cur => ({\n      inputText: cur.outputText\n    }));\n  };\n  typingText = event => {\n    this.setState({ inputText: event.target.value });\n  };\n  render() {\n    return (\n      <COntentDiv>\n        <div className=\"App\">\n          <TextAreaDiv>\n            <textarea id=\"input\" cols=\"30\" rows=\"10\" value={this.state.inputText} onChange={this.typingText} />\n            <ButtonStyled children=\"<->\" onClick={this.textfromOutputToInput} />\n            <textarea id=\"output\" cols=\"30\" rows=\"10\" readOnly value={this.state.outputText} />\n          </TextAreaDiv>\n          <UserControllDiv>\n            <RValueDiv>\n              <p>R =</p>\n              <input id=\"rValue\" type=\"text\" placeholder=\"R value\" pattern=\"[3]{1}\\.{1,2}\" />\n            </RValueDiv>\n            <ButtonConteiner>\n              <ButtonStyled onClick={this.encode}>Encode</ButtonStyled>\n              <ButtonStyled onClick={this.decode}>Decode</ButtonStyled>\n            </ButtonConteiner>\n          </UserControllDiv>\n        </div>\n      </COntentDiv>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}